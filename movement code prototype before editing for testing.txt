def astar(destinationx,destinationy,startx,starty):

    #loop sets the destinations of the nodes 
    endnode = (destinationx,destinationy)
    for i in range(len(node_list)):
        if node_list[i] == None:
            pass
        else:
            node_list[i].updatetogo(destinationx,destinationy)            
    shortest = 0
    openlist = []
    closedlist = []
    startnode = node_list((startx//tilesize),(starty//tilesize))
    found = False
    count = 0
    openlist.append(startnode)
    
    while found ==False:
        for i in range(len(openlist)):
            lowestfnode = []
            lowestf = 0
            if openlist[i].H_cost <= lowestf:
                lowestfnode = openlist[i]
                lowestf = openlist[i].H_cost
        current = lowestfnode
        openlist.remove(current)
        closedlist.append(current)
        
        if (current.xpos == destinationx) and (current.ypos == destinationy) :
            found = True
            
        x=current.xpos//tilesize
        y=current.ypos//tilesize
        #find each neighbour of the current
        xrows = current.xpos//tilesize
        yrows = current.ypos//tilesize
        listofneighbours = []
        left = True
        right = True
        top = True
        below = True
        if xrows ==0:
            left = False
        elif xrows == 10:
            right = False
        elif yrows == 0:
            top = False
        elif yrows == 10:
            below = False
            #l
        if left == True:
            listofneighbours.append(node[(y)][(x-1)])
            #ld
        if (left == True) and (below ==True):
            listofneighbours.append(node[(y+1)][(x-1)])
            #d
        if below == True:
            listofneighbours.append(node[(y+1)][(x)])
            #dr
        if (below == True)and(right == True):
            listofneighbours.append(node[(y+1)][(x+1)])
            #r
        if right == True:
            listofneighbours.append(node[(y)][(x+1)])
            #rt
        if (right ==True )and(top == True):
            listofneighbours.append(node[(y-1)][(x+1)])
            #t
        if top == True:
            listofneighbours.append(node[(y-1)][(x)])
            #tl
        if (top==True)and(left==True):
            listofneighbours.append(node[(y-1)][(x-1)])

        for i in range(len(listofneighbours)):
            if listofneighbours[i] == None:
                listofneighbours.remove(listofneighbours[i])
                #i+=1
            for k in range (len(closedlist)):
                if closedlist[k] == listofneighbours[i]:
                    listofneighours.remove(listofneighbours[i])
                    #i+=1
#now have a list of traversable neighbours
 #       for i in range(len(listofneighbours)):
  #          listofneighbours[i].updatetogo(destinationx,destinationy)
   #         listofneighbours[i].updatetrav(xrows,yrows)
#updated the neighbours with their distance to go and travelled
#loops thru neighbours and picks the one with the shortest distance 

    def shortest(listofneigbhours,shortest):
        changecheck = shortest
        for i in range(len(listofneighbours)):
            if listofneighbours[i].distance_travelled <= shortest.distance_travelled:
                shortest = listofneighbours[i]
        if changecheck.distance_travelled < shortest.distance_travelled:
            return False
        else:
            return True
        
    def neighbouropen(listofneighbours,openlist):
        for j in range(len(listofneighbours)):
            for i in range(len(openlist)):
                if listofneighbours[j] == openlist[i]:
                    inopen = True
        if inopen == True:
            return False
        else:
            return True
    for i in range(len(listofneighbours)):
        shortest = listofneighbours[i]
        if (shortest(listofneighbours,shortest) == True) or (neighbouropen(listofneighbours,openlist) == True):
            listofneighbours[i].updatetrav(current.xpos,current.ypos)
            listofneighbours[i].updatetogo(destinationx,destinationy)
            listofneighbours[i].updateparent(current.xposr,current.ypos)
            current.updatechild(listofneighbours[i].xpos,listofneighbours[i].yos)
            current = listofneighbours[i]
            for i in range(len(openlist)):
                if openlist[i] == current:
                    pass
                else:
                    openlist.append(current)


#picking destinations for units
#loop by number of units higlighted and append the desstinations to a list then assign a destination to each unit in order of the units speed
    spacesneeded = len(player_armyhighlight)
    destx = destinationx//tilesize
    desty = destinationy//tilesize
    listofdests = []
    initial = mapOB[destx][desty]
    current = initial

    for i in range (spaceneeded):
        if i == 0:
            if current.passable == True:
               listofdests.append[current]
        if i == 1:
            current = mapOB[(destx-1)][desty]
            if current.passable == True:
                listofdests.append[current]
        if i == 2:
            current = mapOB[(destx-1)][(desty-1)]
            if current.passable ==True:
                listofdests.append[current]
        if i ==3:
            current = mapOB[destx][(desty-1)]
            if current.passable ==True:
                listofdests.append[current]
        if i ==4:
            current = mapOB[(destx+1)][desty]
            if current.passable ==True:
                listofdests.append[current]
        if i == 5:
            current = mapOB[(destx+1)][(desty+1)]
            if current.passable ==True:
                listofdests.append[current]

#assigns destinations to units        
    for i in range(len(player_armyhighlight)):
        player_armyhighlight[i].destpostx = listofdests[i].xpos
        player_armyhighlight[i].destposty = listofdests[i].ypos
        

    #each unit needs to be multithreaded for movement
    #movement function 
        #movement code

#take the destinations and the unit  being moved 
    def move(x,y,unit):
        #the x and y are the targets for the unit to move to ]
        #the unit should be the head unit in the columb or the only unit

        if tilesize ==64:
            pixelmod = 1
        elif tilesize == 72:
            pixelmod = 1.125
        elif tilesize == 96:
            pixelmod =1.5

        speed = unit.speed
        xindex = (x//tilesize)
        yindex = (x//tilesize)
        mapmod = mapOB[xindex,yindex].speedmod
        unitspeed = ((speed * mapmod) *pixelmod)
        done = False
        #pick the direction to move in

        if (x  >= unit.xpost):
            directionxmod = 1

        elif ((x<= unit.xpost)):
            directionxmod = -1

        if y >= unit.ypost :
            directionymod = 1

        elif y <= unit.ypost:
            directionymod = -1
        print("chosen direction" & directionymod)

        unitspeedx = unitspeed * directionxmod
        unitspeedy = unitspeed* directionymod
        
        while done == False:
            if (unit.xpost ==((x*tilesize)+(0.5*tilesize))) and ((unit.ypost) == ((y*tilesize)+(0.5*tilesize))):
                done = True
            print("move")
            time.sleep(0.01)                                                                                                                                  
            unit.xpost = (unit.xpost + unitspeedx)
            unit.ypost = (unit.ypost+unitspeedy)
    #multithreading#moving into the columb

##    if __name == "__main__":
##        format = "%(asctime)s: %(message)s"
##        logging.basicConfig(format=format,level=logging.INFO,datefmt="%H:%M:%S")
##        with concurrent.futures.ThreadPoolExecuter(max_workers=6)as executer:
##            for index in range(6):
##                
##      
        
        